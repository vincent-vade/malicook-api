// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: recipes.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const CreateRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (
                title,
                description,
                difficulty,
                cooking_time,
                preparation_duration,
                pricing,
                number_person,
                user_id
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8
         )
    RETURNING id, title, description, difficulty, cooking_time, preparation_duration, pricing, number_person, user_id, created_at, updated_at
`

type CreateRecipeParams struct {
	Title               string         `json:"title"`
	Description         sql.NullString `json:"description"`
	Difficulty          Difficulty     `json:"difficulty"`
	CookingTime         time.Time      `json:"cookingTime"`
	PreparationDuration time.Time      `json:"preparationDuration"`
	Pricing             Pricing        `json:"pricing"`
	NumberPerson        int16          `json:"numberPerson"`
	UserID              uuid.UUID      `json:"userId"`
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, CreateRecipe,
		arg.Title,
		arg.Description,
		arg.Difficulty,
		arg.CookingTime,
		arg.PreparationDuration,
		arg.Pricing,
		arg.NumberPerson,
		arg.UserID,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Difficulty,
		&i.CookingTime,
		&i.PreparationDuration,
		&i.Pricing,
		&i.NumberPerson,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteRecipe = `-- name: DeleteRecipe :exec
DELETE FROM recipes WHERE id = $1
`

func (q *Queries) DeleteRecipe(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteRecipe, id)
	return err
}

const EditRecipe = `-- name: EditRecipe :exec
UPDATE recipes SET
                 title = $2,
                 cooking_time = $3,
                 pricing = $4,
                 preparation_duration = $5,
                 number_person = $6,
                 description = $7,
                 user_id = $8,
                 difficulty = $9,
                 updated_at = now()
WHERE id = $1
`

type EditRecipeParams struct {
	ID                  uuid.UUID      `json:"id"`
	Title               string         `json:"title"`
	CookingTime         time.Time      `json:"cookingTime"`
	Pricing             Pricing        `json:"pricing"`
	PreparationDuration time.Time      `json:"preparationDuration"`
	NumberPerson        int16          `json:"numberPerson"`
	Description         sql.NullString `json:"description"`
	UserID              uuid.UUID      `json:"userId"`
	Difficulty          Difficulty     `json:"difficulty"`
}

func (q *Queries) EditRecipe(ctx context.Context, arg EditRecipeParams) error {
	_, err := q.db.ExecContext(ctx, EditRecipe,
		arg.ID,
		arg.Title,
		arg.CookingTime,
		arg.Pricing,
		arg.PreparationDuration,
		arg.NumberPerson,
		arg.Description,
		arg.UserID,
		arg.Difficulty,
	)
	return err
}

const GetRecipe = `-- name: GetRecipe :one
SELECT id, title, description, difficulty, cooking_time, preparation_duration, pricing, number_person, user_id, created_at, updated_at FROM recipes WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRecipe(ctx context.Context, id uuid.UUID) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, GetRecipe, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Difficulty,
		&i.CookingTime,
		&i.PreparationDuration,
		&i.Pricing,
		&i.NumberPerson,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListRecipes = `-- name: ListRecipes :many
SELECT id, title, description, difficulty, cooking_time, preparation_duration, pricing, number_person, user_id, created_at, updated_at FROM recipes
`

func (q *Queries) ListRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, ListRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Difficulty,
			&i.CookingTime,
			&i.PreparationDuration,
			&i.Pricing,
			&i.NumberPerson,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
