// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: categories.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const CountCategory = `-- name: CountCategory :one
SELECT count(*) FROM categories
`

func (q *Queries) CountCategory(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountCategory)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateCategory = `-- name: CreateCategory :one
INSERT INTO categories (
    name
) VALUES (
             $1
         )
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRowContext(ctx, CreateCategory, name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteCategory, id)
	return err
}

const EditCategory = `-- name: EditCategory :exec
UPDATE categories SET name = $2, updated_at = now()
WHERE id = $1
`

type EditCategoryParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) EditCategory(ctx context.Context, arg EditCategoryParams) error {
	_, err := q.db.ExecContext(ctx, EditCategory, arg.ID, arg.Name)
	return err
}

const GetCategory = `-- name: GetCategory :one
SELECT id, name, created_at, updated_at FROM categories WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRowContext(ctx, GetCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListCategories = `-- name: ListCategories :many
SELECT id, name, created_at, updated_at FROM categories
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, ListCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
